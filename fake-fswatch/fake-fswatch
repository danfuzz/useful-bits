#!/bin/bash

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Use the fake `fswatch`? Will get set to `1` if `fswatch` isn't available, but
# can also be forced to `1` for testing / debugging.
useFakeFswatch=0

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            ;;
        --fake-fswatch)
            useFakeFswatch=1
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            ;;
        *)  # Default case: No more options, break out of the loop.
            break;
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'usage:'
    echo ''
    echo "${progName} [--fake-fswatch]"
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi

# Derived variables.

if ! which fswatch >/dev/null; then
    useFakeFswatch=1
fi


#
# Helper functions
#

# Fake version of `fswatch` that works by repeated polling and `shasum`-ing of
# file/directory contents. It's not particularly efficient but gets the job
# done.
function fake-fswatch {
    local arg
    local includes=()
    local excludes=()
    local dir=''

    while (( $# != 0 )); do
        arg="$1"
        case "$1" in
            --exclude)
                excludes+=("$2")
                shift 2
                ;;
            --include)
                includes+=("$2")
                shift 2
                ;;
            --one-event)
                shift # Ignore.
                ;;
            *)
                dir="$1"
                break
        esac
    done

    # What we do here is get a hash of the result of long-`ls`ing all the files
    # we care about. We check the hash every minute or so, and exit the loop
    # when it changes.

    local findCmd=(find "${dir}" '-type' 'f' '(')

    findCmd+=('(' '-true') # `-true` to make find not complain on empty list.
    for arg in "${excludes[@]}"; do
        if [[ ! ${arg} =~ \$$ ]]; then
            arg+=".*"
        fi
        findCmd+=('!' '-regex' "${arg}")
    done
    findCmd+=(')')

    findCmd+=('-o' '(' '-false') # `-false` for similar reason as above.
    for arg in "${includes[@]}"; do
        if [[ ! ${arg} =~ \$$ ]]; then
            arg+=".*"
        fi
        findCmd+=('-o' '-regex' "${arg}")
    done
    findCmd+=(')')

    findCmd+=(')' '-exec' '/bin/ls' '-l' '{}' ';')

    local sum="$("${findCmd[@]}" | shasum | awk '{ print $1; }')"
    local newSum

    log 'Fake `fswatch`. Original hash:' "${sum}"
    while true; do
        sleep 60
        newSum="$("${findCmd[@]}" | shasum | awk '{ print $1; }')"
        if [[ ${newSum} != ${sum} ]]; then
            break
        fi
        log 'No change...'
    done

    log 'Fake `fswatch`. New hash:' "${newSum}"
}

# Do an `fswatch`, or fake it out if it's not available.
function do-fswatch {
    if (( ${useFakeFswatch} )); then
        fake-fswatch "$@"
    else
        fswatch "$@" >/dev/null
        log 'File(s) updated!'
    fi
}


#
# Main script
#

echo 'This file just exists for the helper function.' 1>&2
exit 1
