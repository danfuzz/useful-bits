#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [--] [<assignment> ...] [--] [<jq-expression> ...]
      Constructs and prints one or more JSON values from variable
      assignments passed into an expression evaluated by `jq` either with
      `--null-input` (by default) or as a usual pipeline over input values.
      If no expression is given, it is taken to be `.`, which will end up
      formatting the input as implied/specified by the output options.

      The <jq-expression> arguments are concatenated together (separated by
      spaces) to form the final expression to be evaluated.

      <assignment>
        <name>=<value> Assign `$name` to be the indicated string value.
        <name>:json=<value> Assign `$name` to be the indicated parsed JSON value.

      --compact
        Output in compact form (not multiline JSON).
      --lines
        Output each item as a single line. Similar to `--raw`, except that
        a strings with newlines or CRs in them get treated as non-raw so as
        to maintain the guarantee of item-per-line.
      --raw
        Output raw strings (and other values compactly).
      --read-stdin
        Read value(s) from stdin to form pipeline input.
      --slurp-stdin
        Read all values from stdin into a single array pipeline input.
      --words
        Like `--lines`, except that the guarantee is a word per line. As such,
        strings with any whitespace get treated as non-raw.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Input style.
inputStyle=none

# Output style.
outputStyle=normal

# List of variable assignments, as parallel arrays of type, name, and value.
varTypes=()
varNames=()
varValues=()

# Value construction expression.
valueExpression=''

# Error during argument processing?
argError=0

# Parse options.
while (( $# > 0 )); do
    case "$1" in
        --compact)
            outputStyle=compact
            ;;
        --lines)
            outputStyle=lines
            ;;
        --raw)
            outputStyle=raw
            ;;
        --read-stdin)
            inputStyle=read
            ;;
        --slurp-stdin)
            inputStyle=slurp
            ;;
        --words)
            outputStyle=words
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

# Parse assignments.
while (( $# > 0 && !argError )); do
    arg="$1"
    if [[ ${arg} == '--' ]]; then
        shift
        break
    fi

    [[ ${arg} =~ ^([_a-zA-Z0-9]+)(:[a-z]+)?=(.*)$ ]] \
    || break

    varNames+=("${BASH_REMATCH[1]}")
    varValues+=("${BASH_REMATCH[3]}")

    varType="${BASH_REMATCH[2]}"
    if [[ ${varType} == '' ]]; then
        varType='string'
    else
        # Drop initial `:`.
        [[ ${varType} =~ ^:(.*)$ ]];
        varType="${BASH_REMATCH[1]}"
    fi

    varTypes+=("${varType}")

    shift
done

# Construct the value expression from the remaining arguments.
if (( $# == 0 )); then
    valueExpression='.'
else
    valueExpression="$*"
fi

if (( argError )); then
    usage "${argError}"
fi


#
# Main script
#

jqArgs=()

case "${inputStyle}" in
    none)
        jqArgs+=('--null-input')
        ;;
    read)
        : # No additional arguments needed.
        ;;
    slurp)
        jqArgs+=('--slurp')
        ;;
esac

case "${outputStyle}" in
    compact)
        jqArgs+=('--compact-output')
        ;;
    lines)
        jqArgs+=('--raw-output' '--compact-output')
        lineHelper='
            if type == "string" and test("[\n\r]"; "m")
            then (. | @json)
            else .
            end'
        valueExpression="(${valueExpression}) | ${lineHelper}"
        ;;
    raw)
        jqArgs+=('--raw-output' '--compact-output')
        ;;
    words)
        jqArgs+=('--raw-output' '--compact-output')
        wordHelper='
            if type == "string" and test("[ \n\r\t]"; "m")
            then (. | @json)
            else .
            end'
        valueExpression="(${valueExpression}) | ${wordHelper}"
        ;;
esac

for (( i = 0; i < ${#varTypes[@]}; i++ )); do
    varType="${varTypes[${i}]}"
    case "${varType}" in
        json)
            jqArgs+=('--argjson')
            ;;
        string)
            jqArgs+=('--arg')
            ;;
        *)
            echo 1>&2 "Unrecognized variable type: ${varType}"
            exit 1
            ;;
    esac

    jqArgs+=("${varNames[${i}]}" "${varValues[${i}]}")
done

# Note: `jq` doesn't recognize `--` as an end-of-options sign, but generally
# speaking there's no ambiguity between a valid `jq` option and its program
# text. Nonetheless, we prepend an extra space if the program begins with a
# dash, just in case the user of this script passed in something wacky.
if [[ ${valueExpression} =~ ^- ]]; then
    valueExpression=" ${valueExpression}"
fi

jqArgs+=("${valueExpression}")

exec jq "${jqArgs[@]}"
