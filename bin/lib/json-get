#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Argument parsing
#

# Output option.
outputOpt=()

# Error during argument processing?
argError=0

# Parse options.
while (( $# > 0 )); do
    case "$1" in
        --compact|--lines|--raw|--words)
            outputOpt=("$1")
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

if (( $# < 1 )); then
    echo 1>&2 'Missing <json-value> argument.'
    argError=1
fi

# JSON value.
value="$1"
shift

# JQ expression.
exprArgs=("$@")
if (( $# ==  0 )); then
    exprArgs=('.')
fi

if (( argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] [--] <json-value> [<assignment> ...] [--]"
    echo '[<jq-expression> ...]'
    echo '  Performs an operation on a single JSON value (at least with typical'
    echo '  usage). More specifically, <json-value> is used as the sole input to'
    echo '  a `json-val` invocation consisting of the rest of the arguments. If'
    echo '  no expression is given, it is taken to be `.`, which will end up just'
    echo '  formatting the input value as implied/specified by the output options.'
    echo ''
    echo '  --compact'
    echo '    Output in compact form (not multiline JSON).'
    echo '  --lines'
    echo '    Output each item as a single line. Similar to `--raw`, except that'
    echo '    a strings with newlines or CRs in them get treated as non-raw so as'
    echo '    to maintain the guarantee of item-per-line.'
    echo '  --raw'
    echo '    Output raw strings (and other values compactly).'
    echo '  --words'
    echo '    Like `--lines`, except that the guarantee is a word per line. As such,'
    echo '    strings with any whitespace get treated as non-raw.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit $(( argError < 0 ? 0 : argError ))
fi


#
# Main script
#

lib json-val <<< "${value}" "${outputOpt[@]}" --read-stdin -- "${exprArgs[@]}"
