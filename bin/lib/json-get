#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

. "${progDir}/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [--] <json-value> [<assignment> ...] [--]
    [<jq-expression> ...]
      Performs an operation on a single JSON value (at least with typical
      usage). More specifically, <json-value> is used as the sole input to
      a `json-val` invocation consisting of the rest of the arguments. If
      no expression is given, it is taken to be `.`, which will end up just
      formatting the input value as implied/specified by the output options.

      --compact
        Output in compact (not multiline) JSON form.
      --json
        Output in JSON form. This is the default.
      --lines
        Output each item as a single line. Similar to `--raw`, except that
        a strings with newlines or CRs in them get treated as non-raw so as
        to maintain the guarantee of item-per-line.
      --raw
        Output raw strings (and other values compactly).
      --words
        Like `--lines`, except that the guarantee is a word per line. As such,
        strings with any whitespace get treated as non-raw.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Output style.
opt-choice --var=outputStyle --default=json compact json lines raw words

# Value to operate on.
positional-arg --required --var=value value

# Expressions to operate on the value.
rest-arg --var=exprArgs

process-args "$@" || usage "$?"


#
# Main script
#

if (( ${#exprArgs[@]} == 0 )); then
    exprArgs=('.')
fi

lib json-val <<< "${value}" --"${outputStyle}" --read-stdin -- "${exprArgs[@]}"
