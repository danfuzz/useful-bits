#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [--] <json-value> [<assignment> ...] [--]
    [<jq-expression> ...]
      Performs an operation on a single JSON value (at least with typical
      usage). More specifically, <json-value> is used as the sole input to
      a `json-val` invocation consisting of the rest of the arguments. If
      no expression is given, it is taken to be `.`, which will end up just
      formatting the input value as implied/specified by the output options.

      --compact
        Output in compact form (not multiline JSON).
      --lines
        Output each item as a single line. Similar to `--raw`, except that
        a strings with newlines or CRs in them get treated as non-raw so as
        to maintain the guarantee of item-per-line.
      --raw
        Output raw strings (and other values compactly).
      --words
        Like `--lines`, except that the guarantee is a word per line. As such,
        strings with any whitespace get treated as non-raw.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Output option.
outputOpt=()

# Error during argument processing?
argError=0

# Parse options.
while (( $# > 0 )); do
    case "$1" in
        --compact|--lines|--raw|--words)
            outputOpt=("$1")
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

if (( $# < 1 )); then
    echo 1>&2 'Missing <json-value> argument.'
    argError=1
fi

# JSON value.
value="$1"
shift

# JQ expression.
exprArgs=("$@")
if (( $# ==  0 )); then
    exprArgs=('.')
fi

if (( argError )); then
    usage "${argError}"
fi


#
# Main script
#

lib json-val <<< "${value}" "${outputOpt[@]}" --read-stdin -- "${exprArgs[@]}"
